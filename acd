[1mdiff --git a/routes/users.js b/routes/users.js[m
[1mindex a6fc54f..382c58d 100644[m
[1m--- a/routes/users.js[m
[1m+++ b/routes/users.js[m
[36m@@ -15,4 +15,4 @@[m [mmodule.exports = (knex) => {[m
   });[m
 [m
   return router;[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
[1mdiff --git a/server.js b/server.js[m
[1mindex 340b5dc..768051e 100644[m
[1m--- a/server.js[m
[1m+++ b/server.js[m
[36m@@ -38,247 +38,11 @@[m [mapp.use(express.static("public"));[m
 // Mount all resource routes[m
 app.use("/api/users", usersRoutes(knex));[m
 [m
[31m-[m
[31m-const allAppGets = () => {[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* REDIRECT PAGE[m
[31m-   * 	REQUIRES: (empty)[m
[31m-   * 	PROMISES: Redirects to all maps[m
[31m-   ***********************************/[m
[31m-  app.get("/", (req, res) => {[m
[31m-    res.redirect('/maps');[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SHOW ALL MAPS PAGE[m
[31m-   * 	REQUIRES: User session to create, edit and favorite a map[m
[31m-   * 	PROMISES: Show maps, titles and markers even if user isn't logged in[m
[31m-   ************************************************************************/[m
[31m-  app.get("/maps", (req, res) => {[m
[31m-    //ALL MAPS OBJECT[m
[31m-    let templateVars = {[m
[31m-      user: "req.session.id",[m
[31m-      "id": {[m
[31m-        mapId: "id",[m
[31m-        title: "dog map",[m
[31m-        description: "this is my map",[m
[31m-        favorite: 0,[m
[31m-        "markerId": {[m
[31m-          markerId: "id",[m
[31m-          x: 0, [m
[31m-          y: 0,[m
[31m-          z: 0,[m
[31m-          title: "starbucks"[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-  console.log(templateVars.user);[m
[31m-[m
[31m-    res.render("maps", user);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SHOW SPECIFIC MAP PAGE[m
[31m-   * 	REQUIRES: User session to create, edit and favorite a map[m
[31m-   * 	PROMISES: Specific map shown with title and markers even if user isn't logged in[m
[31m-   ************************************************************************************/[m
[31m-  app.get("/maps/:id", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//USER ID, ALL MAPS AND MARKERS CONTAINED OBJECT[m
[31m-    let templateVars = {[m
[31m-      "id": {[m
[31m-        mapId: "id",[m
[31m-        title: "dog map",[m
[31m-        description: "this is my map",[m
[31m-        favorite: 0,[m
[31m-        "markerId": {[m
[31m-          markerId: "id",[m
[31m-          x: 0, [m
[31m-          y: 0,[m
[31m-          z: 0,[m
[31m-          title: "starbucks"[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    res.render("maps_id", templateVars);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* CREATE NEW MAP PAGE[m
[31m-   * 	REQUIRES: User session to create, edit and favorite a map[m
[31m-   * 	PROMISES: Specific map shown with title and markers even if user isn't logged in[m
[31m-   *************************************************************************************/[m
[31m-  app.get("/map/:id/new", (req, res) => {[m
[31m-[m
[31m-[m
[31m-    res.render('new_map');[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SHOW SPECIFIC USER PAGE[m
[31m-   * 	REQUIRES: User session to create, edit and favorite a map[m
[31m-   * 	PROMISES: Specific user shown with username, icon, maps created(titles and markers) and maps favroited[m
[31m-   **********************************************************************************************************/[m
[31m-  app.get("/user/:id", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//USER ID, ALL MAPS AND MARKERS CONTAINED OBJECT[m
[31m-    let templateVars = {[m
[31m-      "id": {[m
[31m-        mapId: "id",[m
[31m-        title: "dog map",[m
[31m-        description: "this is my map",[m
[31m-        favorite: 0,[m
[31m-        "markerId": {[m
[31m-          markerId: "id",[m
[31m-          x: 0, [m
[31m-          y: 0,[m
[31m-          z: 0,[m
[31m-          title: "starbucks"[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    res.render("user_id", templateVars);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* REGISTRATION PAGE[m
[31m-   * 	REQUIRES: User is not currently registered[m
[31m-   * 	PROMISES: User is redirected to registration page[m
[31m-   *****************************************************/[m
[31m-  app.get("/user/:id/new", (req, res) => {[m
[31m-[m
[31m-[m
[31m-    res.render("register");[m
[31m-  });[m
[31m-}[m
[31m-allAppGets();[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-[m
[31m-const allAppPosts = () => {[m
[31m-  /* EDIT MAP[m
[31m-   * 	REQUIRES: User session and map title, id, array of markers[m
[31m-   * 	PROMISES: Specific map shown with title and markers even if user isn't logged in[m
[31m-   ************************************************************************************/[m
[31m-  app.post("/map/:id/edit", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//SPECIFIC MAP OBJECT WITH ALL MARKERS CONTAINED[m
[31m-    let templateVars = {[m
[31m-      "id": {[m
[31m-        mapId: "id",[m
[31m-        title: "dog map",[m
[31m-        description: "this is my map",[m
[31m-        favorite: 0,[m
[31m-        "markerId": {[m
[31m-          markerId: "id",[m
[31m-          x: 0, [m
[31m-          y: 0,[m
[31m-          z: 0,[m
[31m-          title: "starbucks"[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    res.redirect("/maps/:id", templateVars);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SEND USER REGISTRATION[m
[31m-   * 	REQUIRES: User inputs username, email and password[m
[31m-   * 	PROMISES: Account generated, encrypted password, and session created at new profile[m
[31m-   ***************************************************************************************/[m
[31m-  app.post("/register", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//SPECIFIC USER OBJECT[m
[31m-    let templateVars = {[m
[31m-      id: "id",[m
[31m-      email: "admin@google.com",[m
[31m-      password: "123EZPZ"[m
[31m-    }[m
[31m-[m
[31m-    res.redirect("/user/:id", templateVars);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-  /* SEND HEADER BAR LOGIN[m
[31m-   * 	REQUIRES: All users that exist in an appended object[m
[31m-   * 	PROMISES: Encrypted user session with cookie[m
[31m-   *************************************************/[m
[31m-  app.post("/login", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//ALL USER OBJECT[m
[31m-    let templateVars = {[m
[31m-      "id": {[m
[31m-      	id: "id",[m
[31m-      	email: "admin@google.com",[m
[31m-      	password: "123EZPZ"[m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    res.render("/user/:id", templateVars);[m
[31m-  });[m
[31m-}[m
[31m-allAppPosts();[m
[31m-[m
[31m-[m
[31m-[m
[31m-const allAppDeletes = () => {[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SEND USER LOGOUT REQUEST[m
[31m-   * 	REQUIRES: User session email[m
[31m-   * 	PROMISES: User session terminated, redirected to maps page[m
[31m-   **************************************/[m
[31m-  app.delete("/user/:id/delete", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//SPECIFIC USER OBJECT[m
[31m-    let templateVars = {[m
[31m-      email: req.session.email,[m
[31m-    }[m
[31m-[m
[31m-    res.redirect("/maps", templateVars);[m
[31m-  });[m
[31m-[m
[31m-[m
[31m-[m
[31m-  /* SEND DELETE MAP REQUEST[m
[31m-   * 	REQUIRES: User session email and map id to be deleted[m
[31m-   * 	PROMISES: Map deleted user redirected to all maps created[m
[31m-   **************************************************************/[m
[31m-  app.delete("/map/:id/delete", (req, res) => {[m
[31m-[m
[31m-[m
[31m-  	//SPECIFIC MAP USER HYBRID[m
[31m-    let templateVars = {[m
[31m-      mapId: "id",[m
[31m-      email: req.session.email[m
[31m-    }[m
[31m-[m
[31m-    res.